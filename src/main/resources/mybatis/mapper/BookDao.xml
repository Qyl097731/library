<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.qyl.dao.BookDao">
    <!--    自定义返回的类型-->

    <resultMap id="bookMap" type="com.qyl.bean.Book">
        <id property="id" column="id"/>
        <result property="bookName" column="bookName"/>
        <result property="bookEncrypt" column="bookEncrypt"/>
        <result property="pubName" column="pubName"/>
        <result property="typeName" column="typeName"/>
        <result property="total" column="total"/>
        <result property="stock" column="stock"/>
        <result property="num" column="num"/>
        <result property="author" column="author"/>
        <result property="ifBorrow" column="ifBorrow"/>
    </resultMap>



    <!--    void saveBook(Book book);-->
    <insert id="saveBook">
        insert into tb_book(bookName,stock,author,bookEncrypt,pubName,typeName,ifBorrow)
        values
            (#{bookName},#{stock},#{author},#{bookEncrypt},#{pubName},#{typeName},#{ifBorrow})
    </insert>
    <!--   public Book getBookById(Integer id);-->
    <select id="getBookById" resultMap="bookMap">
        select * from tb_book where id=#{id}
    </select>

    <!--    public List<Book> fuzzyQueryAllBooks(String name);-->
    <select id="fuzzyQueryAllBooks" resultMap="bookMap">
        select id,bookName,bookEncrypt,count(*) total,sum(case when stock = 1 then 1 else 0 end) stock,pubName,author,typeName,ifBorrow from tb_book as b
        <where>
            <if test="bookEncrypt!=null and !bookEncrypt.equals(' ')">
                b.bookEncrypt like CONCAT('%',#{bookEncrypt},'%')
            </if>
            <if test="bookName != null and !bookName.equals(' ')">
                and b.bookName like CONCAT ('%',#{bookName},'%')
            </if>
            <if test="author != null and !author.equals(' ')">
                and b.author like CONCAT ('%',#{author},'%')
            </if>
            <if test="pubName != null and !pubName.equals(' ')">
                and b.pubName like CONCAT ('%',#{pubName},'%')
            </if>
            <if test="typeName != null and !typeName.equals(' ') ">
                and b.typeName = #{typeName}
            </if>
        </where>
        group  by bookEncrypt,bookName,author,pubName,typeName
    </select>


    <select id="accurateQueryAllBooks" resultMap="bookMap">
        select * from tb_book as b
        <where>
            <if test="bookEncrypt!=null and !bookEncrypt.equals(' ')">
                b.bookEncrypt=#{bookEncrypt}
            </if>
            <if test="bookName != null and !bookName.equals(' ')">
                and b.bookName=#{bookName}
            </if>
            <if test="author != null and !author.equals(' ')">
                and b.author=#{author}
            </if>
            <if test="pubName != null and !pubName.equals(' ')">
                and b.pubName =#{pubName}
            </if>
            <if test="typeName != null and !typeName.equals(' ')">
                and b.typeName = #{typeName}
            </if>
        </where>
    </select>





    <!--    void updateBook(Integer id);-->
    <update id="updateBook">
        update tb_book as b set
                b.bookName = #{bookName},
                b.stock = #{stock},
                b.author = #{author},
                b.bookEncrypt = #{bookEncrypt},
                b.pubName = #{pubName},
                b.typeName = #{typeName},
                b.ifBorrow = #{ifBorrow}
        where b.id = #{id}
    </update>

    <!--    void insertBooksBatch(List<Book>list);-->
    <insert id="insertBooksBatch">
        insert into tb_book(bookName,stock,author,bookEncrypt,pubName,typeName,ifBorrow)
        values
        <foreach collection="list" separator="," item="item">
            (#{item.bookName},#{item.stock},#{item.author},#{item.bookEncrypt},#{item.pubName},#{item.typeName},#{item.ifBorrow})
        </foreach>
    </insert>


    <!--    void deleteBookById(Integer id);-->
    <delete id="deleteBookById" parameterType="java.lang.Integer">
        delete from tb_book where id=#{id}
    </delete>

</mapper>
